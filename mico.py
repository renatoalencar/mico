#!/usr/bin/python

import re
import sys
from getopt import getopt

CODOPS = {
    # 1-format instructions
    'lodd': 0b0000000000000000,
    'stod': 0b0001000000000000,
    'addd': 0b0010000000000000,
    'subd': 0b0011000000000000,
    'jpos': 0b0100000000000000,
    'jzer': 0b0101000000000000,
    'jump': 0b0110000000000000,
    'loco': 0b0111000000000000,
    'lodl': 0b1000000000000000,
    'stol': 0b1001000000000000,
    'addl': 0b1010000000000000,
    'subl': 0b1011000000000000,
    'jneg': 0b1100000000000000,
    'jnze': 0b1101000000000000,
    'call': 0b1110000000000000,
    # 3-format instructions
    'pshi': 0b1111000000000000,
    'popi': 0b1111001000000000,
    'push': 0b1111010000000000,
    'pop' : 0b1111011000000000,
    'retn': 0b1111100000000000,
    'swap': 0b1111101000000000,
    # 2-format instructions
    'insp': 0b1111110000000000,
    'desp': 0b1111111000000000
}

def parse_instructions(fd):
    for line in fd.readlines():
        if not line.strip():
            continue

        args = re.split('\s+', line)
        args = [i for i in args if i != '']
        codop = CODOPS[args[0].lower()]
        if (codop & CODOPS['pshi']) != CODOPS['pshi']:
            arg = int(args[1])
        else:
            arg = 0
        yield codop, arg

def build_code(fd):
    codes = parse_instructions(fd)

    for code in codes:
        # 3-format
        if (code[0] & CODOPS['insp']) == CODOPS['insp']:
            # 2-format args must be less than 8 bits
            if code[1].bit_length() > 8:
                raise Exception, '2-format args must be less than 8 bits'
            yield code[0] | code[1]
        elif (code[0] & CODOPS['pshi']) == CODOPS['pshi']:
            yield code[0]
        else:
            # 1-format args must be less then 12 bits
            if code[1].bit_length() > 12:
                raise Exception, '1-format args must be less than 12 bits'
            yield code[0] | code[1]

def build_mif(codes, output):
    codes = list(codes)
    output.write('-- Generated by mico (MIc COmpiler)\n\n')
    output.write('DEPTH = %d;\n' % len(codes))
    output.write('WIDTH = 16;\n')
    output.write('ADDRESS_RADIX = HEX;\n')
    output.write('DATA_RADIX = BIN;\n\n')
    output.write('CONTENT\nBEGIN\n\n')

    for i, code in enumerate(codes):
        bincode = bin(code)[2:]
        bincode = '0'*(16 - len(bincode)) + bincode
        output.write('%s : %s\n' % (hex(i)[2:], bincode))

    output.write('\nEND;\n')

def main():
    output = sys.stdout
    input = sys.stdin

    opts, args = getopt(sys.argv[1:], 'o:')

    for opt,arg in opts:
        if opt == '-o':
            output = open(arg, 'w')
        else:
            raise Exception, '%s is not a option' % opt

    if len(args) >= 1:
        input = open(args[0])

    build_mif(build_code(input), output)

if __name__ == '__main__':
    main()
